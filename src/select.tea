import {Component} from "react"
import ssjs from "ssjs"

import theme from "./helpers/theme.tea"
import classes from "./helpers/classes.tea"
import {tappable, Color} from "./helpers/css-color.tea"

let selectCSS = ssjs(
    {
        "doric-select": {
            margin: 2
            display: "block"
            "& fieldset": {
                borderRadius: 4
                overflow: "hidden"
                padding: 0
                paddingRight: 1
                backgroundColor: "white"
                border: "1px solid lightgray"
                margin: 0
                "&.disabled": {
                    backgroundColor: "lightgray"
                }
                "& legend": {
                    marginLeft: 16
                    fontSize: 12
                    "&:empty": {
                        display: "none"
                    }
                    "&:not(:empty) + input": {
                        paddingTop: 6
                    }
                }
                "&.required legend": {
                    color: (theme) => theme.input.label.required
                }
                "&.optional legend": {
                    color: (theme) => theme.input.label.optional
                }
                "&:focus-within": {
                    borderColor: (theme) => theme.input.border.focus
                }
            }
            "& select": {
                display: "block"
                width: "100%"
                fontSize: 16
                padding: "0px 12px"
                borderWidth: 0
                margin: 0
                backgroundColor: "transparent"
                height: 40
                "&:focus": {
                    outline: "none"
                }
                "&.disabled": {
                    backgroundColor: "transparent"
                }
            }
        }
    }
    {name: "doric-select"}
)
selectCSS.generate(theme)

class Select extends Component {
    render() => {
        let {
            children, selectedIndex = -1
            placeholder, label
            className, required, optional, disabled
            onChange
            wrapProps
            ...passThrough
        } = @props

        let props = {
            className: classes({
                className
                required
                optional
                disabled
            })
            ...passThrough
        }
        let selectProps = {
            value: selectedIndex
            onChange(evt) => {
                evt.value = values[evt.target.value]
                onChange?(evt)
            }
            disabled
        }

        let list = placeholder != void
            ? [<option hidden value="-1">{placeholder}</option>]
            : []
        let values = []

        let groups = React.Children.toArray(children)
            .reduce(
                ({list, current, name}, option, index) => {
                    let {group = "_", value, label} = option.props
                    let elem = <option value=index key=index>{label}</option>

                    if group != name {
                        name = group
                        if name == "_" {
                            current = list
                        }
                        else {
                            current = [name]
                            list.push(current)
                        }
                    }
                    current.push(elem)
                    values.push(value)

                    return {list, current, name}
                }
                {list, current: null, name: null}
            )
            .list
            .map(
                (item, index) => Array.isArray(item) == true
                    ? <optgroup label=item[0] key=`g${index}`>{item[1...]}</optgroup>
                    : item
            )

        return <doric-select {...wrapProps}>
            <fieldset {...props}>
                <legend>{label}</legend>
                <select {...selectProps}>
                    {groups}
                </select>
            </fieldset>
        </doric-select>
    }
}

export default Select
