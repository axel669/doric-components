construct Color {
    new(...args) => {
        [#r, #g, #b, #a = 1] = switch {
            case typeof args[0] == "string" {
                let color = args[0].startsWith("#") == true
                    ? args[0][1...]
                    : args[0]
                let alpha = color.length > 6
                    ? color[6...]
                    : "FF"
                break [
                    parseInt(color[0...2], 16)
                    parseInt(color[2...4], 16)
                    parseInt(color[4...6], 16)
                    parseInt(alpha, 16) / 255
                ]
            }
            default {
                break args
            }
        }
    }

    get inverse() => Color(255 - #r, 255 - #g, 255 - #b, #a)

    toString() => {
        if #a == 1 {
            return "rgb(${#r}, ${#g}, ${#b})"
        }
        return "rgba(${#r}, ${#g}, ${#b}, ${#a})"
    }
}

let tapActive = ".gjs-tap-active:not(.doric-disabled):not(.doric-flat)::after"
let bcolorVariant = (color) => {
    "&.${color}": {
        backgroundColor: (theme) => theme.color[color]
        color: "white"
        "&.flat": {
            backgroundColor: "transparent",
            color: (theme) => theme.color[color]
        }
        "&${tapActive}": {
            backgroundColor: (theme) =>
                theme.highlightColor.inverse
        }
    }
}

let tappable = (color) => {
    position: "relative"
    "&::after": {
        content: "''"
        position: "absolute"
        top: 0
        left: 0
        width: "100%"
        height: "100%"
        transition: "background-color 250ms linear"
    }
    "&.gjs-tap-active:not(.disabled)::after": {
        transition: "none"
        backgroundColor: color
    }
}

export {
    Color
    bcolorVariant
    tappable
}
