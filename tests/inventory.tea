/*
    bags
        backpack
        bacg of holding
        hewards handy haversack
        pouch
        portable hole
*/

(() => {
    let getHash = () => {
        let hash = document.location.hash
        .toString()
        .replace(/^#?/, "")
        .trim()

        if hash.startsWith("/") == false {
            return `/${hash}`
        }
        return hash
    }
    let mut lastHash = null
    setInterval(
        () => {
            let current = getHash()

            if current == lastHash {
                return
            }

            lastHash = current
            PubSub.publishSync("hashchange", current)
        }
        50
    )
})()

let RouteContext = React.createContext(null)
let Router = (context) =>
    (Component) => class extends React.Component {
        static displayName = "Router[${Component.name ?? Component.displayName}]"

        constructor(props) => {
            super(props)
            @state = {hash: null}
        }

        componentDidMount() => {
            @token = PubSub.subscribe(
                "hashchange"
                (msg, hash) => @setState({hash})
            )
        }
        componentWillUnmount() => {
            PubSub.unsubscribe(@token)
        }

        render() => <context.Provider value=@state.hash>
            <Component {...@props} />
        </context.Provider>
    }

let compile = (path, exact = false) => {
    // console.time("compile")
    let groups = []
    let regstr = path.replace(
        /(\/(:|\*)(\w+))|\//g
        (match, a, type, name) => {
            if a != void {
                groups.push(name)
                if type == ":" {
                    return "\\/([\\w\\-]+)"
                }
                if type == "*" {
                    return "\\/?(.*)"
                }
            }
            return "\\/"
        }
    )
    let regex = RegExp*(
        `^${regstr}${exact == true ? "$" : ":"}`
        "i"
    )

    let parse = (path, group = true) => {
        let match = path?.match(regex)

        if match == null {
            return null
        }
        if (group == false) {
            return true
        }

        return groups.reduce(
            (g, name, index) => {
                g[name] = match[index + 1]
                return g
            }
            {}
        )
    }
    // console.timeEnd("compile")

    return parse
}
class Route extends React.Component {
    static contextType = RouteContext

    render() => {
        if @context == null {
            return null
        }

        let params = compile(@props.path, @props.exact)(@context)

        if params == null {
            return null
        }
        let Component = @props.component
        let route = {params, path: @context}

        return  <Component {...@props} routeInfo=route />
    }
}
class Switch extends React.Component {
    static contextType = RouteContext

    render() => {
        let routes = React.Children.toArray(@props.children)

        for route in routes {
            let {path, exact} = route.props
            let show = compile(path, exact)(@context, false)

            if show == true {
                return route
            }
        }

        return null
    }
}

let navigate = (path) =>
    () => {
        document.location.hash = path
    }
navigate.rel = (relative) =>
    () => {
        document.location.hash += relative
    }
navigate.back = () => history.back()

let storage = {
    read(name, defaultValue) => {
        let source = localStorage.getItem(name)

        if source == null {
            return defaultValue
        }

        return JSON.parse(source)
    }
    write(name, value) => localStorage.setItem(name, JSON.stringify(value))
}

let genID = () => Date.now().toString()
let app = Norn(
    {
        bags: {
            initial: storage.read("bags", {})
            $add(bags, {bag, id}) => {
                ...bags
                [id]: {...bag, items: []}
            }
            $addItem(bags, {bagID, item}) => immutableUpdate(
                bags
                {[`${bagID}.items.$push`]: item}
            )
        }
        chars: {
            initial: storage.read("chars", {})
            $add(chars, {id, name}) => {
                ...chars
                [id]: {name, bags: []}
            }
            "bags.$add"(chars, {charID, id}) => immutableUpdate(
                chars
                {[`${charID}.bags.$push`]: id}
            )
        }
    }
    {
        "bags.$add"(charID, bag) => {charID, bag, id: genID()}
        "bags.$addItem"(bagID, item) => {bagID, item: {...item, id: genID()}}
        "chars.$add"(name) => {name, id: genID()}
    }
)
let {actions} = app

let connect = (app, reducer = (state, props) => state) =>
    (Component) => class extends React.PureComponent {
        constructor(props) => {
            super(props)
            @state = reducer(app.state, @props)
            @unsub = app.subscribe(
                (newState) => @setState(
                    () => reducer(newState, @props)
                )
            )
        }

        componentWillUnmount() => @unsub()

        render() => <Component {...{...@props, ...@state}} />
    }

app.subscribe(
    (newState) => {
        storage.write("bags", newState.bags)
        storage.write("chars", newState.chars)
        console.log(newState)
    }
)

window.actions = actions

let dialogCSS = SSJS(
    {
        "dialog-root": {
            position: "absolute"
            top: 0
            left: 0
        }
        "dialog-list": {
            position: "fixed"
            top: 0
            left: 0
            right: 0
            bottom: 0
            backgroundColor: "rgba(0, 0, 0, 0.6)"
            "&:empty": {
                display: "none"
            }
        }
        "dialog-window": {
            backgroundColor: "white"
            position: "absolute"
            top: "25%"
            left: "50%"
            transform: "translateX(-50%)"
            width: "80%"
            height: "50%"
            maxWidth: 640
            maxHeight: 480
        }
    }
    {name: "dialog-css"}
)
dialogCSS.generate()

let dialog = (() => {
    let rootElem = document.createElement("dialog-root")

    document.body.appendChild(rootElem)

    class DialogList extends React.Component {
        constructor(props) => {
            super(props)

            @state = {dialogs: {}}
        }

        render() => {
            return <dialog-list>
                {Object.values(@state.dialogs)}
            </dialog-list>
        }
    }
    let rootComponent = ReactDOM.render(
        <DialogList />
        rootElem
    )

    return {
        show(Component, props = {}) => {
            let id = genID()
            let close = () => {
                let {dialogs} = rootComponent.state
                delete dialogs[id]

                rootComponent.setState({dialogs})
            }

            let {dialogs as current} = rootComponent.state
            let dialogs = {
                ...current
                [id]: <dialog-window key=id>
                    <Component close=close {...props} />
                </dialog-window>
            }

            rootComponent.setState({dialogs})
        }
    }
})()

let bind = (target, name, desc) => {
    let orig = desc.value

    return {
        desc.enumerable
        configurable: true
        get() =>* {
            let bound = orig.bind(@)

            Object.defineProperty(
                @
                name
                {
                    desc.enumerable
                    configurable: false
                    value: bound
                }
            )

            return bound
        }
    }
}

class Container extends React.PureComponent {
    @bind
    showItem(item) => {
        let {bagID} = @props
        @props.onItemTap({
            item
            bagID
        })
    }

    render() => {
        let {name, items, weight, magical, weightLimit} = @props
        let itemWeight = items.reduce((w, {weight, count}) => w + weight * count, 0)
        let weightDisplay = magical == true
            ? `${weight}lbs [${itemWeight}/${weightLimit}]`
            : `${weight + itemWeight}lbs`

        let itemList =  items
            .sort(compare.prop(".name", compare.string))
            .map(
                (item, index) => {
                    label: `${item.name} (${item.count})`
                    index
                    ...item
                }
            )

        return <doric.panel>
            <doric.panel.title title=name subtitle=weightDisplay />
            <doric.list items=itemList propName="label" onItemTap=@showItem />
        </doric.panel>
    }
}

let compare = {
    string(a, b) => {
        if a < b {
            return -1
        }
        if a > b {
            return 1
        }
        return 0
    }
    reverse(func) =>
        (a, b) => -func(a, b)
    prop(name, func) => {
        let read = Function*("obj", `return obj${name}`)
        return (a, b) => func(read(a), read(b))
    }
}

let headerCSS = SSJS({
    "screen-header": {
        position: "sticky"
        top: 0
        backgroundColor: "#1d62d5"
        color: "white"
        boxShadow: "0px 2px 2px rgba(0, 0, 0, 0.4)"
        height: 40
        display: "block"
        fontSize: 20
    }
})
headerCSS.generate()

@connect(app, ({chars}) => {chars})
class CharList extends React.PureComponent {
    addChar() => {
        let name = prompt("Character Name")?.trim() ?? ""

        if name == "" {
            return
        }

        actions."chars.$add"(name)
    }

    reset() => {
        let confirmed = confirm("Reset all data?")

        if confirmed == true {
            localStorage.clear()
            document.location.reload()
        }
    }

    showChar({id}) => navigate(`/char/${id}`)()

    render() => {
        let {chars} = @props

        let charList = Object.entries(chars)
            .sort(compare.prop("[1].name", compare.string))
            .map(
                ([id, character]) => {id, ...character}
            )

        return <div>
            <screen-header>
                <div className="center" style={height: "100%"}>
                    Characters
                </div>
            </screen-header>
            <doric.list items=charList propName="name" onItemTap=@showChar />
            <doric.grid cols=1 style={position: "fixed", bottom: 0, right: 0}>
                <doric.button circle=40 danger onTap=@reset>
                    <ion-icon class="ion-md-alert" />
                </doric.button>
                <doric.button circle=40 secondary onTap=@addChar>
                    <ion-icon class="ion-md-add" />
                </doric.button>
            </doric.grid>
        </div>
    }
}

let Test = ({bagID, name, index, close}) =>
    <div>
        <doric.customListeners onTap=close />
        {bagID}: {index} {name}
    </div>

@connect(
    app
    ({chars, bags}, {routeInfo}) => {
        let character = chars[routeInfo.params.charID]

        return {
            charInfo: {
                ...character
                bags: character.bags.map(
                    (bagID) => {bagID, ...bags[bagID]}
                )
            }
        }
    }
)
class CharacterBags extends React.PureComponent {
    showItem({bagID, item}) => {
        dialog.show(
            Test
            {bagID, ...item}
        )
    }

    render() => {
        let {name, bags} = @props.charInfo
        let bagDisplay = bags.length == 0
            ? "No bags :("
            : bags.map(
                (bag) => <Container key=bag.bagID {...bag} onItemTap=@showItem />
            )

        return <div>
            <screen-header>
                <doric.grid cols=8>
                    <doric.button flush onTap=navigate.back>
                        <ion-icon class="ion-ios-arrow-back" />
                    </doric.button>
                    <div />
                    <div className="center" gcolspan=4 style={fontSize: 22, height: "100%"}>{name}</div>
                </doric.grid>
            </screen-header>

            {bagDisplay}

            <doric.grid cols=1 style={position: "fixed", bottom: 0, right: 0}>
                <doric.button primary onTap=navigate.rel("/addItem") disabled={bags.length == 0}>
                    <ion-icon class="ion-md-add" /> Item
                </doric.button>
                <doric.button secondary onTap=navigate.rel("/addBag")>
                    <ion-icon class="ion-md-add" /> Bag
                </doric.button>
            </doric.grid>
        </div>
    }
}

let validNumber = (num) => (
    isNaN(num) == false
    && num >= 0
)

class AddBag extends React.Component {
    constructor(props) => {
        super(props)

        @state = {
            name: ""
            magical: false
            weight: ""
            weightLimit: ""
        }
    }

    @bind
    update(name, prop = ".target.value") => {
        let read = Function*("evt", `return evt${prop}`)
        return (evt) => @setState({
            [name]: read(evt)
        })
    }

    @bind
    addBag() => {
        let {charID} = @props.routeInfo.params
        let {name, magical, weight, weightLimit} = @state

        let bag = {
            name: name.trim()
            magical
            weight: parseFloat(weight)
        }
        if magical == true {
            bag.weightLimit = parseFloat(weightLimit)
        }

        let invalidWeightLimit = (
            magical == true
            && validNumber(bag.weightLimit) == false
        )
        if bag.name == "" || validNumber(bag.weight) == false || invalidWeightLimit == true {
            alert("Invalid bag information")
            return
        }

        await actions."bags.$add"(charID, bag)
        navigate.back()
    }

    render() => {
        let {name, magical, weight, weightLimit} = @state

        let magicWeight = (magical == false)
            ? null
            : <doric.input label="Weight Limit"
                type="number"
                value=weightLimit
                onChange=@update("weightLimit", ".target.value")
            />

        return <div>
            <doric.panel>
                <doric.panel.title title="Add New Bag" />

                <doric.input label="Bag Name" value=name onChange=@update("name") />
                <doric.input label="Bag Weight"
                    type="number"
                    value=weight
                    onChange=@update("weight")
                />
                <doric.checkbox text="Magical"
                    checked=magical
                    onChange=@update("magical", ".checked")
                />

                {magicWeight}

                <div style={height: 40} />
                <doric.grid cols=2>
                    <doric.button text="Cancel" danger onTap=navigate.back />
                    <doric.button text="Add Bag" onTap=@addBag block primary />
                </doric.grid>
            </doric.panel>
        </div>
    }
}

@connect(
    app
    ({chars, bags}, {routeInfo}) => {
        let character = chars[routeInfo.params.charID]

        return {
            bags: character.bags.map(
                (bagID) => {bagID, bags[bagID].name}
            )
        }
    }
)
class AddItem extends React.Component {
    constructor(props) => {
        super(props)

        @state = {
            bagID: null
            name: ""
            weight: ""
            count: ""
        }
    }

    @bind
    update(name, prop = ".target.value") => {
        let read = Function*("evt", `return evt${prop}`)
        return (evt) => @setState({
            [name]: read(evt)
        })
    }

    @bind
    addItem() => {
        let {bagID, name, weight, count} = @state

        let item = {
            name: name.trim()
            weight: parseFloat(weight)
            count: parseInt(count)
        }

        if name == "" || validNumber(item.weight) == false || validNumber(item.count) == false {
            alert("Item weight or count is invalid")
            return
        }

        await actions."bags.$addItem"(bagID, item)
        navigate.back()
    }

    render() => {
        let {name, weight, bagID, count} = @state
        let {bags} = @props
        let bagList = bags.map(
            ({bagID, ...bag}) => <option key=bagID value=bagID label=bag.name />
        )

        return <div>
            <doric.panel>
                <doric.panel.title title="Add Item" />

                <doric.select label="Bag" value=bagID onChange=@update("bagID", ".value") placeholder="Select Bag">
                    {bagList}
                </doric.select>
                <doric.input label="Item Name" value=name onChange=@update("name") />
                <doric.input label="Item Weight"
                    type="number"
                    value=weight
                    onChange=@update("weight")
                />
                <doric.input label="Count"
                    type="number"
                    value=count
                    onChange=@update("count")
                />

                <doric.grid cols=2>
                    <doric.button text="Cancel" danger onTap=navigate.back />
                    <doric.button text="Add Item" primary onTap=@addItem />
                </doric.grid>
            </doric.panel>
        </div>
    }
}

@Router(RouteContext)
class App extends React.Component {
    render() => {
        return <div>
            <Switch>
                <Route path="/" exact component=CharList />
                <Route path="/char/:charID" exact component=CharacterBags />
                <Route path="/char/:charID/addBag" exact component=AddBag />
                <Route path="/char/:charID/addItem" exact component=AddItem />
            </Switch>
        </div>
    }
}

ReactDOM.render(
    <App />
    document.querySelector("app-root")
)
