let cssNoMeasurement = Set*([
    "animationIterationCount"
    "boxFlex"
    "boxFlexGroup"
    "boxOrdinalGroup"
    "columnCount"
    "fillOpacity"
    "flex"
    "flexGrow"
    "flexPositive"
    "flexShrink"
    "flexNegative"
    "flexOrder"
    "fontWeight"
    "lineClamp"
    "lineHeight"
    "opacity"
    "order"
    "orphans"
    "stopOpacity"
    "strokeDashoffset"
    "strokeOpacity"
    "strokeWidth"
    "tabSize"
    "widows"
    "zIndex"
    "zoom"
])
let cssPrefixed = Set*([
    "userSelect"
])
let cssPrefixes = ["-webkit-", "-moz-", "-ms-", "-o-", ""]
let processValue = (key, value) => {
    let type = typeof value
    if type == "string" {
        return value
    }
    if type == "number" && cssNoMeasurement.has(key) == false {
        return "${value}px"
    }
    if Array.isArray(value) == true {
        return value.map((val) => cssValue(key, val))
    }
    return value
}
let genParts = (css, theme, parent = "", depth = -1) => {
    let parts = []
    let tabs = "    ".repeat(Math.max(0, depth))
    let innerTabs = "    ".repeat(depth + 1)
    let attachments = []
    if parent != "" {
        parts.push("${tabs}${parent} {")
    }
    for key, value of css {
        switch {
            case key.indexOf("&") != -1 {
                attachments.push(
                    genParts(value, theme, key.replace(/&/g, parent), depth)
                )
            }
            case typeof value == "object" && Array.isArray(value) == false {
                parts.push(
                    genParts(value, theme, key, depth + 1)
                )
            }
            default {
                let keyStr = key.replace(
                    /[A-Z]/g
                    (letter) => "-${letter.toLowerCase()}"
                )
                let rawValue = typeof value == "function"
                    ? value(theme)
                    : value
                let cssValue = processValue(key, rawValue)
                switch {
                    case cssPrefixed.has(key) == true {
                        for prefix in cssPrefixes {
                            parts.push("${innerTabs}${prefix}${keyStr}: ${cssValue};")
                        }
                    }
                    case Array.isArray(cssValue) == true {
                        for value in cssValue {
                            parts.push("${innerTabs}${keyStr}: ${value};")
                        }
                    }
                    default {
                        parts.push("${innerTabs}${keyStr}: ${cssValue};")
                    }
                }
            }
        }
    }
    if parent != "" {
        parts.push("${tabs}}")
    }
    parts.push(...attachments)
    return parts.join("\n")
}

construct Sheet {
    new(css, attr) => {
        #css = css
        #elem = document.createElement("style")

        let attributes = attr ?? {}
        for key, value of attributes {
            #elem.setAttribute(key, value)
        }

        document.querySelector("head").appendChild(#elem)
    }

    generate(theme) => {
        #elem.innerHTML = genParts(#css, theme)
    }
}
window.Sheet = Sheet
